
/////////////////////////////////////////////////////////////
// %NAME% 多通道池化 数据格式 NHWC
// input: 多通道二维图片，维度<ROWS, COLS, CHANNELS>
// output: %POOL_SIZE_ROWS%x%POOL_SIZE_COLS%池化后的特征图片，维度<ROWS, COLS, CHANNELS>
void %NAME%(const Eigen::Tensor<%CPP_TYPE%, %DIMENSION_COUNTS%, Eigen::RowMajor>& input,
            Eigen::Tensor<%CPP_TYPE%, %DIMENSION_COUNTS%, Eigen::RowMajor>& output)
{
#ifndef INDEX_%INPUT_ROWS%_%INPUT_COLS%_%INPUT_CHANNELS%
#define INDEX_%INPUT_ROWS%_%INPUT_COLS%_%INPUT_CHANNELS%(DATA, ROW, COL, CHANNEL) \
    DATA[(ROW)*(%INPUT_COLS%)*(%INPUT_CHANNELS%)+(COL)*(%INPUT_CHANNELS%)+(CHANNEL)]
#endif
    
#ifndef INDEX_%OUTPUT_ROWS%_%OUTPUT_COLS%_%INPUT_CHANNELS%
#define INDEX_%OUTPUT_ROWS%_%OUTPUT_COLS%_%INPUT_CHANNELS%(DATA, ROW, COL, CHANNEL) \
    DATA[(ROW)*(%OUTPUT_COLS%)*(%INPUT_CHANNELS%)+(COL)*(%INPUT_CHANNELS%)+(CHANNEL)]
#endif
    const %CPP_TYPE%* srcMatrix = input.data();
    %CPP_TYPE%* dstMatrix = output.data();
    
    for( int channel_index = 0; channel_index < %INPUT_CHANNELS%; channel_index++ )
    {
        for( int row_index = 0; row_index < %OUTPUT_ROWS%; row_index++ )
        {
            for( int col_index = 0; col_index < %OUTPUT_COLS%; col_index++ )
            {
                %CPP_TYPE% maxValue = INDEX_%INPUT_ROWS%_%INPUT_COLS%_%INPUT_CHANNELS%(srcMatrix, row_index*%POOL_SIZE_ROWS%, col_index*%POOL_SIZE_COLS%, channel_index);
                for( int x = 0; x < %POOL_SIZE_ROWS%; x++ )
                {
                    for( int y = 0; y < %POOL_SIZE_COLS%; y++ )
                    {
                        maxValue = Eigen::numext::maxi(maxValue, INDEX_%INPUT_ROWS%_%INPUT_COLS%_%INPUT_CHANNELS%(srcMatrix, row_index*%POOL_SIZE_ROWS%+x, col_index*%POOL_SIZE_COLS%+y, channel_index));
                    }
                }
                INDEX_%OUTPUT_ROWS%_%OUTPUT_COLS%_%INPUT_CHANNELS%(dstMatrix, row_index, col_index, channel_index) = maxValue;
            }
        }
    }
}

