
/////////////////////////////////////////////////////////////
// %NAME% 多通道卷积 数据格式 NCHW
// input: 多通道二维图片，维度<CHANNELS, ROWS, COLS>
// output: %CHANNELS%个卷积核卷积后的特征，维度<CHANNELS, ROWS, COLS>
void %NAME%(const Eigen::Tensor<%CPP_TYPE%, 3, Eigen::RowMajor>& input, Eigen::Tensor<%CPP_TYPE%, 3, Eigen::RowMajor>& output)
{
    // 卷积核的长度
    int %NAME%_single_kernel_length = %KERNEL_ROWS% * %KERNEL_COLS% * sizeof(%CPP_TYPE%);
    
    // 将多通道转成单通道数组
    Eigen::Tensor<%CPP_TYPE%, 2, Eigen::RowMajor> input_channels[%CHANNELS%];
    for( int %NAME%_channel_index = 0 ; %NAME%_channel_index < %CHANNELS%; %NAME%_channel_index++ )
    {
        input_channels[%NAME%_channel_index] = input.chip<0>(%NAME%_channel_index);
    }

    // 卷积核维度
    Eigen::array<ptrdiff_t, 2> %NAME%_dimensions;
    %NAME%_dimensions[0] = 0;
    %NAME%_dimensions[1] = 1;
    
    // 卷积输出大小
    output = Eigen::Tensor<%CPP_TYPE%, 3, Eigen::RowMajor>(%KERNEL_COUNTS%, %OUTPUT_ROWS%, %OUTPUT_COLS%);
    
    // 卷积核个数
    for( int %NAME%_kernel_index = 0; %NAME%_kernel_index < %KERNEL_COUNTS%; %NAME%_kernel_index++ )
    {
        Eigen::Tensor<%CPP_TYPE%, 2, Eigen::RowMajor> %NAME%_channel_result(%OUTPUT_ROWS%, %OUTPUT_COLS%);
        %NAME%_channel_result = %NAME%_channel_result.setZero();
        
        // 通道数
        for( int %NAME%_channel_index = 0; %NAME%_channel_index < %CHANNELS%; %NAME%_channel_index++ )
        {
            // 获取单个卷积核
            uint32_t kernelOffset = %NAME%_kernel_index*%CHANNELS%*%NAME%_single_kernel_length;
            kernelOffset += %NAME%_channel_index*%NAME%_single_kernel_length;
            
            Eigen::Tensor<%CPP_TYPE%, 2, Eigen::RowMajor> %NAME%_kernel(%KERNEL_ROWS%, %KERNEL_COLS%);
            memcpy(%NAME%_kernel.data(),
                   %KERNEL_DATA_NAME%+kernelOffset,
                   %NAME%_single_kernel_length);
            
            // 保存单通道的卷积结果
            Eigen::Tensor<%CPP_TYPE%, 2, Eigen::RowMajor> %NAME%_single_channel_result(%OUTPUT_ROWS%, %OUTPUT_COLS%);
            
            EigenCustom::convolve(input_channels[%NAME%_channel_index],
                     %NAME%_kernel,
                     %NAME%_single_channel_result,
                     %STRIDE_X%, %STRIDE_Y%, %ZERO_PADDING%);
            
            // 卷积计算并加上偏置
            %NAME%_channel_result += %NAME%_single_channel_result;
        }
        
        // 获取偏置
        %CPP_TYPE% bias = 0;
        memcpy(&bias, %BIAS_DATA_NAME% + %NAME%_kernel_index * sizeof(%CPP_TYPE%), sizeof(%CPP_TYPE%));
        
        // 保存结果
        output.chip<0>(%NAME%_kernel_index) = %NAME%_channel_result + bias;
    }
}

